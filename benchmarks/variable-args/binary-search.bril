# A standard binary search, not super interesting
# Inputs: An array and a target
# Output: Index of target, or -1 if not found
# Adopted print_array code from bubblesort by Jiajie Li

@print_array(array: ptr<int>, size: int) {
    i: int = const 0;
    one: int = const 1;
.loop:
    cond: bool = lt i size;
    br cond .body .done;
.body:
    loc: ptr<int> = ptradd array i;
    val: int = load loc;
    print val;
.loop_end:
    i: int = add i one;
    jmp .loop;
.done:
    ret;
}

# The function that does the actual computation
# Left and Right are the search range

@binary_search(array: ptr<int>, target: int, left: int, right: int): int {
    negone: int = const -1;
    zero: int = const 0;
    one: int = const 1;
    two: int = const 2;
.check_valid:
    end_cond: bool = gt left right;
    br end_cond .end .body;
.body:
    mid: int = add left right;
    mid: int = div mid two;
.check_equal:
    midloc: ptr<int> = ptradd array mid;
    midval: int = load midloc;
    equal_cond: bool = eq target midval;
    br equal_cond .found .check_gt;
.found:
    ret mid;
.check_gt:
    gt_cond: bool = gt target midval;
    br gt_cond .call_gt .call_lt;
.call_gt:
    newleft: int = add left one;
    output: int = call @binary_search array target newleft right;
    ret output;
.call_lt:
    newright: int = sub right one;
    output: int = call @binary_search array target left newright;
    ret output;
.end:
    output: int = id negone;
    ret output;
}

# ARGS: 1 2 6 7 11
@main(size: int, array: ptr<int>) {
    target: int = const 7;
    zero: int = const 0;
    four: int = const 4;
    output: int = call @binary_search array target zero four;
    print output;
}