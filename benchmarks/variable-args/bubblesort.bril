# Bubble Sort for a list containing 5 elements. It is sorted in ascending order. 
# It can be easily extended to list with any other length. 

# input: an array
# output: sorted elements in ascending order

@print_array(array: ptr<int>, size: int) {
    i: int = const 0;
    one: int = const 1;
.loop:
    cond: bool = lt i size;
    br cond .body .done;
.body:
    loc: ptr<int> = ptradd array i;
    val: int = load loc;
    print val;
.loop_end:
    i: int = add i one;
    jmp .loop;
.done:
    ret;
}

@swap_cond(array: ptr<int>, j: int) {
    one: int = const 1;
    j_add_1: int = add j one;
    loc: ptr<int> = ptradd array j;
    loc_next: ptr<int> = ptradd array j_add_1;
    elem_a: int = load loc;
    elem_b: int = load loc_next;
    
    cond: bool = gt elem_a elem_b;
    br cond .swap .done;
.swap:
    store loc elem_b;
    store loc_next elem_a;
.done:
    ret;
}

# ARGS: 3 10 1 9 7
@main(size: int, array: ptr<int>) {
# Bubble Sort
one: int = const 1;
i: int = const 0;
j: int = const 0;
sizei: int = sub size one;
.loopi:
    condi: bool = lt i sizei;
    br condi .bodyi .donei;
.bodyi:
    sizej: int = sub size i;
    sizej: int = sub sizej one;
.loopj:
    condj: bool = lt j sizej;
    br condj .bodyj .donej;
.bodyj:
    call @swap_cond array j;
.loop_endj:
    j: int = add j one;
    jmp .loopj;
.donej:
    j: int = const 0;
.loopi_end:
    i: int = add i one;
    jmp .loopi;
.donei:

# Print array
    call @print_array array size;
}