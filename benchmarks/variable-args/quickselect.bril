# Quick select algorithm
# Inputs: An unordered array and a number k
# Output: kth smallest number in the array

@print_array(array: ptr<int>, size: int) {
    i: int = const 0;
    one: int = const 1;
.loop:
    cond: bool = lt i size;
    br cond .body .done;
.body:
    loc: ptr<int> = ptradd array i;
    val: int = load loc;
    print val;
.loop_end:
    i: int = add i one;
    jmp .loop;
.done:
    ret;
}

@partition(array: ptr<int>, l: int, r: int): int {
  one: int = const 1;
  pivotloc: ptr<int> = ptradd array r;
  pivot: int = load pivotloc;
  i: int = id l;
  j: int = id l;
.loop:
  cond: bool = lt j r;
  br cond .body .done;
.body:
  curloc: ptr<int> = ptradd array j;
  cur: int = load curloc;
  swap: bool = le cur pivot;
  br swap .swap_j .loop_end;
.swap_j:
  iloc: ptr<int> = ptradd array i;
  ival: int = load iloc;
  store curloc ival;
  store iloc cur;
  i: int = add i one;
.loop_end:
  j: int = add j one;
  jmp .loop;
.done:
  iloc: ptr<int> = ptradd array i;
  ival: int = load iloc;
  store iloc pivot;
  store pivotloc ival;
  ret i;
}

@quickselect(array: ptr<int>, l: int, r: int, k: int): int {
  one: int = const 1;
  index: int = call @partition array l r;
  ipos: int = sub index l;
  kpos: int = sub k one;
  ieqk: bool = eq ipos kpos;
  br ieqk .found .not_found;
.found:
  iloc: ptr<int> = ptradd array index;
  i: int = load iloc;
  ret i;
.not_found:
  igtk: bool = gt ipos kpos;
  br igtk .greater .less;
.greater:
  newr: int = sub index one;
  i: int = call @quickselect array l newr k;
  ret i;
.less:
  newl: int = add index one;
  newk: int = sub k index;
  newk: int = add newk l;
  newk: int = sub newk one;
  i: int = call @quickselect array newl r newk;
  ret i;
}

# ARGS: 97 108 98 101 114 116
@main(size: int, array: ptr<int>) {
  k: int = const 4;
  zero: int = const 0;
  five: int = const 5;
  output: int = call @quickselect array zero five k;
  print output;
}